{"version":3,"sources":["Components/Albums.js","Components/Photos.js","App.js","serviceWorker.js","index.js"],"names":["Albums","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAlbums","axios","get","then","res","setState","albums","data","albumsResults","requestOngoing","changeHandler","search","filteredAlbums","state","filter","album","title","toLowerCase","includes","_this2","react_default","a","createElement","className","type","placeholder","onChange","e","target","value","length","map","key","id","react_router_dom","to","concat","Component","Photos","getPhotos","props","match","params","photos","photo","src","thumbnailUrl","alt","href","url","rel","App","react_router","exact","path","render","Components_Albums","Components_Photos","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac1f018b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\n\nclass Albums extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            albums: [],\n            albumsResults: [],\n            requestOngoing: true\n        };\n    }\n\n    getAlbums = () => {\n        axios.get(`https://jsonplaceholder.typicode.com/albums`)\n            .then(res => {\n                this.setState({\n                    albums: res.data,\n                    albumsResults: res.data,\n                    requestOngoing: false\n                })\n            })\n    }\n\n    changeHandler = (search) => {\n        const filteredAlbums = this.state.albums.filter(album => album.title.toLowerCase().includes(search.toLowerCase()));\n        this.setState({\n            albumsResults: filteredAlbums\n        })\n    }\n\n    componentDidMount() {\n        this.getAlbums();\n    }\n\n    render() {\n        if (!this.state.requestOngoing){ \n            return(\n                <div className=\"albums-list\">\n                    <input \n                        type=\"search\" \n                        placeholder=\"Search Album\"\n                        onChange={e => this.changeHandler(e.target.value)}\n                        className=\"search-box\"\n                    />\n                    <h1>Albums</h1>\n                    \n                    {this.state.albumsResults.length > 0 ? (\n                        \n                        this.state.albumsResults.map(album => {\n                            return(\n                                    <li key={album.id}>\n                                        <Link to={`code-test/photos/${album.id}`} >{album.title}</Link>\n                                    </li>\n                            )\n                        })\n                    ) : (\n                        <div>\n                            <h2>No results found :(</h2>\n                        </div>\n                    )\n                    }\n                </div>\n            )\n        }\n        else{\n            return(\n                <div className=\"spinner-container\">\n                    <div className=\"spinner\">\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Albums;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Photos extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            photos: [],\n            requestOngoing: true\n        };\n    }\n\n    getPhotos = () => {\n        axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=${this.props.match.params.id}`)\n            .then(res => {\n                this.setState({\n                    photos: res.data,\n                    requestOngoing: false\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.getPhotos()\n    }\n\n    render() {\n        if (!this.state.requestOngoing){ \n        return(\n        <div>            \n            <h1>Photos</h1>\n            <div className=\"photos-list\">\n                {\n                    this.state.photos.map(photo => {\n                        return(\n                            <div className=\"photo-container\" key={photo.id}>\n                                <img src={photo.thumbnailUrl} alt={photo.title}/>\n                                <h4><a href={photo.url} target=\"_blank\" rel=\"noopener noreferrer\">{photo.title}</a></h4>\n                            </div>\n\n                        )\n                    })\n                }\n            </div>\n        </div>\n        )\n        }\n        else{\n            return(\n                <div className=\"spinner-container\">\n                    <div className=\"spinner\">\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Photos;","import React from 'react';\nimport Albums from './Components/Albums';\nimport Photos from './Components/Photos';\nimport {Route, Switch} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/code-test/\" render={() => <Albums/>}/>\n        <Route exact path=\"/code-test/photos/:id\" render={(props) => <Photos {...props} />}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}